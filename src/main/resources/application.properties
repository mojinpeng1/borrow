##用户在线方式
# 1： 不允许多端同时在线(默认)
# 2： 允许多端同时在线
# 0： 不限制

logging.level.root=info
logging.level.org.springframework=info
logging.level.org.hibernate=info
logging.level.s.documentation=info


##Tomcat
#配置Tomcat端口
server.port=8080
#配置Tomcat编码，默认为UTF-8f
server.tomcat.uri-encoding=UTF-8

#项目访问路径
#server.servlet.context-path=/borrow
#server.servlet-path=
#错误页，指定发生错误时，跳转的URL
server.error.path=/error

# Single file max size
spring.http.multipart.maxFileSize=500Mb
# All files max size
spring.http.multipart.maxRequestSize=102400Mb
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true




# 数据库访问配置
# 主数据源，默认的
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource


spring.datasource.url=jdbc:mysql://101.133.136.205:3306/borrow?autoReconnect=true&autoReconnectForPools=true&useUnicode=true&characterEncoding=UTF8&useSSL=false
spring.datasource.username=root
spring.datasource.password=123456

spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true

spring.jpa.open-in-view=true
#JPA Configuration:
spring.jpa.database=MYSQL
# Show or not log for each sql query
spring.jpa.show-sql=false
spring.jpa.generate-ddl=true
# Hibernate ddl auto (create, create-drop, update,none)
spring.jpa.hibernate.ddl-auto=none
#spring.jpa.database=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#在log和console中打印出更漂亮的SQL
spring.jpa.properties.hibernate.format_sql=true
#在SQL中生成有助于调试的注释信息
spring.jpa.properties.hibernate.use_sql_comments=true


## 二级缓存
#启用二级缓存
hibernate.cache.use_second_level_cache = true
#设置二级缓存插件EHCache
hibernate.cache.region.factory_class = org.hibernate.cache.ehcache.EhCacheRegionFactory
#用于开启二级缓存的统计机制
hibernate.generate_statistics=true
#启用查询缓存
hibernate.cache.use_query_cache=true

#设定Message bundles的编码，默认: UTF-8
spring.messages.encoding=UTF-8

# redis 配置
spring.redis.host=127.0.0.1
spring.redis.port=6379
spring.redis.database=0
spring.redis.password=123456





# JavaMailSender 邮件发送的配置
spring.mail.host=smtp.qq.com
spring.mail.username=254192004@qq.com
spring.mail.password=fvrumsgyspunbidd
spring.mail.default-encoding=UTF-8
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true


#系统自动发送邮件观测者
spring.mail.observer=mjp@videasoft.com

# minio文件存储同
example.borrow.minio.url=http://101.133.136.205:9000/
example.borrow.minio.account=minioadmin
example.borrow.minio.pass=minioadmin
